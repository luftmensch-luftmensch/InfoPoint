' Compile with (plantuml -tsvg)
' Available themes: https://bschwarz.github.io/puml-themes/gallery.html
' Favorites themes: amiga, cyborg, materia, minty, reddress-darkgreen, sandstone, toy, vibrant
@startuml core
!theme vibrant

' -----------------------------------------------------
skinparam defaultTextAlignment center
skinparam FrameBackgroundColor white
skinparam FrameBorderColor gray
' -----------------------------------------------------
' left to right direction

frame core {
  frame builder {
    class Builder<T> {
      + {field} instantiator: Supplier<T>
      + {field} instanceModifiers: List<Consumer<T>>
      + {method} of(Supplier<T> instantiator): Builder<T>
      + {method} with(BiConsumer<T, U> consumer, U value): Builder<T>
      + {method} build(): <T>
    }
  }

  frame config {
    class Constants {
      + {field} SERVER_ADDR: String
      + {field} SERVER_PORT: int
      + {field} SERVER_TIMEOUT: int
      + {field} OUTER_DELIMITER:  String
      + {field} INNER_DELIMITER: String
      + {field} FIRST_RUN: String
      + {field} ARTWORKS_RETRIEVED: String
      + {field} ARTWORKS_LIST: String
      + {field} ARTWORK_ITEM_NAME: String
      + {field} ARTWORK_ITEM_AUTHOR: String
      + {field} ARTWORK_ITEM_DATE: String
      + {field} ARTWORK_ITEM_DESCRIPTION: String
      + {field} USERNAME: String
      + {field} PASSWORD: String
      + {field} TOKEN: String
      + {field} PROFILE_PIC: String
      + {field} LEVEL: String
    }

    class GlideConfiguration extends AppGlideModule {
      + {method} applyOptions(Context context, GlideBuilder builder): void
    }
  }

  frame error {
    class CrashReportWriter {
      + {method} uncaughtException(Thread t, Throwable e): void
      + {method} write(Throwable e): void
      + {method} getSystemInfo(): String
    }
  }

  frame networking {
    class NetworkManager {
      - {field} _TAG: String
      + {method} checkConnection(Context context): Boolean
      + {method} retrieveArtwork(String u, String p, String t): ArrayList<ArtWork>
      + {method} user_operation(String r, String u, String p, String t, Context ctx): Boolean
    }
  }

  frame preferences {
    class StorageManager {
	- {field} _TAG: String
	- {field} PREF_NAME: String
	- {method} StorageManager(Context context): StorageManager
	- {method} StorageManager(Context context, String key): StorageManager
	+ {method} with(Context context): StorageManager
	+ {method} with(Context context, boolean force): StorageManager
	+ {method} with(Context context, String prefs_name): StorageManager
	+ {method} read(String key, String defaultValue): String
	+ {method} read(String key, Integer defaultValue): Integer
	+ {method} read(String key, Long defaultValue): Long
	+ {method} read(String key, Boolean defaultValue): Boolean
	+ {method} contains(String key): Boolean
	+ {method} write(String key, T value): <T>
	+ {method} clear(): void
    }
  }

  frame validator {
    class Validator {
      + {method} validate(String s): Boolean
    }
  }


 '' Positioning
 StorageManager -d[hidden]-> NetworkManager
 NetworkManager -u[hidden]-> StorageManager

 Validator -d[hidden]-> CrashReportWriter
 CrashReportWriter -u[hidden]-> Validator
}
hide AppGlideModule

@enduml												

@startuml models
' -----------------------------------------------------
skinparam defaultTextAlignment center
' -----------------------------------------------------
frame model {
  '' top to bottom direction
  class ArtWork {
	- {field} name: String
	- {field} author: String
	- {field} description: String
	- {field} dateOfProduction: String
	+ {method} ArtWork(String n, String a, String d, Strind dc): ArtWork
  }

  class User {
	- {field} id: String
	- {field} name: String
	- {field} password: String
	- {field} type: UserType
	+ {method} User(String name, String password): User
  }

  frame properties {
	   class ArtworkUtil {
		  + {method} retrieveArtWorks(Context ctx): void
		  + {method} saveArtworks(Context ctx, List<ArtWork> l): void

	   }

	   enum UserType {
		  STUDENT,
		  EXPERT
	   }
  }
}
@enduml


@startuml ui
' -----------------------------------------------------
skinparam defaultTextAlignment center
' -----------------------------------------------------
' left to right direction
frame ui {
  frame activity {
	   class MainActivity extends AppCompatActivity {
		  - {field} _TAG: String
		  - {field} navController: NavController
		  - {field} options: NavOptions
		  - {field} bar: ChipNavigationBar
		  + {method} onCreate(Bundle bundle): void
		  - {method} setUI(): void
		  + {method} onBackPressed(): void
		  + {method} onResume(): void
	   }

	   frame authentication {
		   frame login {
		       class LoginActivity extends AppCompatActivity {
			      - {field} _TAG: String
			      - {field} _REQUEST_TYPE: String
			      - {field} usernameTextInputLayout: TextInputLayout
			      - {field} passwordTextInputLayout: TextInputLayout
			      - {field} tokenTextInputLayout: TextInputLayout
			      - {method} setUI(): void
			      - {method} handleLogin(String u, String p, String t): void
			      + {method} onCreate(Bundle bundle): void
			      + {method} onResume(): void
		       }
		   }

		   frame registration {
		       class RegistrationActivity extends AppCompatActivity {
			      - {field} _TAG: String
			      - {field} _REQUEST_TYPE: String
			      - {field} usernameTextInputLayout: TextInputLayout
			      - {field} passwordTextInputLayout: TextInputLayout
			      - {field} confirmPasswordTextInputLayout: TextInputLayout

			      - {method} setUI(): void
			      - {method} handleRegistration(String u, String p, String cp): void
			      + {method} onCreate(Bundle b): void
			      + {method} onBackPressed(): void
			      + {method} onResume(): void
		       }
		   }
	   }

	   frame intro {
		   class SlideItem {
			  - {field} title: String
			  - {field} image: int

			  + {method} SlideItem(String t, int i): SlideItem
			  + {method} getTitle(): String
			  + {method} getImage(): int
		   }

		   class IntroActivity extends AppCompatActivity {
			  - {field} _TAG: String
			  - {field} pager: ViewPager
			  - {field} nextButton: Button
			  - {field} gettingStartedButton: Button
			  - {field} skipButton: Button
			  - {field} currPos: int
			  - {field} items: List<SlideItem>

			  + {method} onCreate(Bundle b): void
			  - {method} setUI(): void
			  - {method} loadLastScreen(): void
		   }
	   }

	   RegistrationActivity -d[hidden]-> MainActivity
	   MainActivity -u[hidden]-> RegistrationActivity

	   MainActivity -r[hidden]-> IntroActivity
	   IntroActivity -l[hidden]-> MainActivity
  }

  frame adapters {
	   class IntroAdapter extends PagerAdapter {
		  - {field} context: Context
		  - {field} items: List<SlideItem>
		  + {method} IntroAdapter(Context ctx, List<SlideItem> s): IntroAdapter
		  + {method} instantiateItem(ViewGroup c, int p): Object
		  + {method} getCount(): int
		  + {method} isViewFromObject(View v, Object o): boolean
		  + {method} destroyItem(ViewGroup c, int pos, Object o): void
	   }

	   class ArtWorkAdapter {
		  - {field} items: List<ArtWork>
		  + {method} ArtWorkAdapter(List<ArtWork> l): ArtWorkAdapter
		  + {method} useFilter(List<ArtWork> l): void
		  + {method} onCreateViewHolder(ViewGroup v, int t): RecyclerView.ViewHolder
		  + {method} onBindViewHolder(ViewHolder v, int t): void
		  + {method} destroyItem(ViewGroup c, int p, Object o): void
		  + {method} getItemCount(): int
	   }

	   class ItemSelector {
		  - {field} clickListener: OnItemClickListener
		  - {field} detector: GestureDetector
		  + {method} ItemSelector(Context c, RecyclerView r, OnItemClickListener l): ItemSelector
		  + {method} onInterceptTouchEvent(RecyclerView r, MotionEvent e): boolean
		  + {method} onTouchEvent(RecyclerView r, MotionEvent e): boolean
		  + {method} onRequestDisallowInterceptTouchEvent(boolean dIntercept): void
	   }

	   ArtWorkAdapter -d[hidden]-> IntroAdapter
	   IntroAdapter -u[hidden]-> ArtWorkAdapter
	   ItemSelector -u[hidden]-> IntroAdapter
	   IntroAdapter -d[hidden]-> ItemSelector

  }

  frame fragment {

	   class ArtWorkFragment extends Fragment {
		  - {field} _TAG: String
		  - {field} item: ArtWork
		  + {field} onCreateView(LayoutInflater i, ViewGroup vg, Bundle b): View
		  + {field} onViewCreated(View v, Bundle b): void
	   }

	   class HomeFragment extends Fragment {
		  - {field} _TAG: String
		  - {field} artWorks: List<ArtWork>
		  - {field} shimmer: ShimmerFrameLayout
		  - {field} rv: RecyclerView
		  + {field} onCreateView(LayoutInflater i, ViewGroup vg, Bundle b): View
		  + {field} onViewCreated(View v, Bundle b): void
		  - {field} retrieveArtWorks(String u, String p, String t): void
		  - {field} loadView(List<ArtWork> l): void
		  - {field} moveToSingleItemView(ArtWork a): void
	   }

	   class ProfileFragment extends Fragment {
		  - {field} _TAG: String
		  - {field} _REQUEST_TYPE: String
		  - {field} selectImageLauncher: ActivityResultLauncher<Intent>
		  - {field} profilePic: ShapeableImageView
		  - {field} userLevel: Chip;
		  + {field} onCreateView(LayoutInflater i, ViewGroup vg, Bundle b): View
		  + {field} onViewCreated(View v, Bundle b): void
		  - {field} loadImageFromURI(Uri u): void
		  - {field} bitmapToString(Bitmap b): String
		  - {field} showAboutUsDialog(): void
		  - {field} showUserLevelDialog(): void
		  - {field} showTokenDialog(String t): void
		  - {field} deleteAccountDialog(String u, String p, String t, Context ctx): void
	   }

	   class SearchFragment extends Fragment {
		  - {field} _TAG: String
		  - {field} adapter: ArtWorkAdapter
		  - {field} seachView: SearchView
		  - {field} items: List<ArtWork>
		  + {method} onCreate(Bundle b): void
		  + {method} onCreateView(LayoutInflater i, ViewGroup vg, Bundle b): View
		  + {method} onViewCreated(View v, Bundle b): void
		  + {method} onPause(): void
		  + {method} onResume(): void
		  - {method} filter(String s): void
		  - {field} moveToSingleItemView(ArtWork a): void
	   }

	   HomeFragment -d[hidden]-> ProfileFragment
	   ProfileFragment -u[hidden]-> HomeFragment

	   SearchFragment -d[hidden]-> ArtWorkFragment
	   ArtWorkFragment -u[hidden]-> SearchFragment
  }
}

hide AppCompatActivity
hide PagerAdapter
hide Fragment
@enduml
